{
  "version": 3,
  "sources": ["../../capitalize/index.js"],
  "sourcesContent": ["\nfunction capitalize (string, opts) {\n  opts = normalizeOptions(opts)\n  if (!opts.preserve) {\n    string = string.toLowerCase();\n  }\n  return string.charAt(0).toUpperCase() + string.substring(1);\n}\n\n// a QUOTE character immediately followed by a word character\nvar QUOTE = /['\"`â€™]/\nvar WORD = /[0-9a-zA-Z\\u00C0-\\u017F\\u0400-\\u04FF]/\n\ncapitalize.words = function (string, opts) {\n  opts = normalizeOptions(opts)\n  if (!opts.preserve) {\n    string = string.toLowerCase();\n  }\n  var startOfWord = 0\n  var nonWord = /[^0-9a-zA-Z\\u00C0-\\u017F\\u0400-\\u04FF]+|$/g\n  var match\n  var out = \"\"\n  var count = 0\n\n  while (match = nonWord.exec(string)) {\n    var sep = match[0]\n    var sepStart = nonWord.lastIndex - sep.length\n    if (QUOTE.test(string[sepStart]) && WORD.test(string[sepStart + 1])) {\n      // don't capitalize after an embedded quote\n      continue\n    }\n    var word = string.substring(startOfWord, nonWord.lastIndex - sep.length)\n    if (QUOTE.test(word[0])) {\n      // strip leading quote\n      out += word[0]\n      word = word.substring(1)\n    }\n    if (typeof opts.skipWord === 'function' && opts.skipWord(word, count)) {\n      out += word\n    } else {\n      out += capitalize(word, opts)\n    }\n    out += sep\n    startOfWord = nonWord.lastIndex\n    count++\n    if (startOfWord == string.length) {\n      break\n    }\n  }\n\n  return out\n}\n\nfunction normalizeOptions(opts) {\n  if (!opts) {\n    return { preserve: false }\n  }\n  if (typeof opts === 'boolean') {\n    return { preserve: opts }\n  }\n  if (opts.skipWord instanceof RegExp) {\n    const rgx = opts.skipWord\n    opts.skipWord = function (word, position) {\n      return position > 0 && rgx.test(word)\n    }\n  }\n  return opts || {}\n}\n\nmodule.exports = capitalize\n"],
  "mappings": ";;;;;AAAA;AAAA;AACA,aAAS,WAAY,QAAQ,MAAM;AACjC,aAAO,iBAAiB,IAAI;AAC5B,UAAI,CAAC,KAAK,UAAU;AAClB,iBAAS,OAAO,YAAY;AAAA,MAC9B;AACA,aAAO,OAAO,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,UAAU,CAAC;AAAA,IAC5D;AAGA,QAAI,QAAQ;AACZ,QAAI,OAAO;AAEX,eAAW,QAAQ,SAAU,QAAQ,MAAM;AACzC,aAAO,iBAAiB,IAAI;AAC5B,UAAI,CAAC,KAAK,UAAU;AAClB,iBAAS,OAAO,YAAY;AAAA,MAC9B;AACA,UAAI,cAAc;AAClB,UAAI,UAAU;AACd,UAAI;AACJ,UAAI,MAAM;AACV,UAAI,QAAQ;AAEZ,aAAO,QAAQ,QAAQ,KAAK,MAAM,GAAG;AACnC,YAAI,MAAM,MAAM,CAAC;AACjB,YAAI,WAAW,QAAQ,YAAY,IAAI;AACvC,YAAI,MAAM,KAAK,OAAO,QAAQ,CAAC,KAAK,KAAK,KAAK,OAAO,WAAW,CAAC,CAAC,GAAG;AAEnE;AAAA,QACF;AACA,YAAI,OAAO,OAAO,UAAU,aAAa,QAAQ,YAAY,IAAI,MAAM;AACvE,YAAI,MAAM,KAAK,KAAK,CAAC,CAAC,GAAG;AAEvB,iBAAO,KAAK,CAAC;AACb,iBAAO,KAAK,UAAU,CAAC;AAAA,QACzB;AACA,YAAI,OAAO,KAAK,aAAa,cAAc,KAAK,SAAS,MAAM,KAAK,GAAG;AACrE,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO,WAAW,MAAM,IAAI;AAAA,QAC9B;AACA,eAAO;AACP,sBAAc,QAAQ;AACtB;AACA,YAAI,eAAe,OAAO,QAAQ;AAChC;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,iBAAiB,MAAM;AAC9B,UAAI,CAAC,MAAM;AACT,eAAO,EAAE,UAAU,MAAM;AAAA,MAC3B;AACA,UAAI,OAAO,SAAS,WAAW;AAC7B,eAAO,EAAE,UAAU,KAAK;AAAA,MAC1B;AACA,UAAI,KAAK,oBAAoB,QAAQ;AACnC,cAAM,MAAM,KAAK;AACjB,aAAK,WAAW,SAAU,MAAM,UAAU;AACxC,iBAAO,WAAW,KAAK,IAAI,KAAK,IAAI;AAAA,QACtC;AAAA,MACF;AACA,aAAO,QAAQ,CAAC;AAAA,IAClB;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
